apiVersion: ray.io/v1alpha1
kind: RayService
metadata:
  name: text2img-app
  namespace: ypp
spec:
  serviceUnhealthySecondThreshold: 300
  deploymentUnhealthySecondThreshold: 300
  serveConfigV2: |
    applications:
      - name: text2img
        import_path: "core.image_service:entrypoint" # Python 模块路径和绑定函数
        runtime_env:
          working_dir: "gs://kscale-text2img-app/deploy.zip"
          env_vars:
            MODEL_PATH: "/data/models/Stable-diffusion/v1-5-pruned-emaonly.safetensors"  # 模型路径

        deployments:
          - name: ImageService                      # 必须与 Python 中定义的类名一致
            max_ongoing_requests: 1                 # 并发请求数上限
            autoscaling_config:
              target_ongoing_requests: 2            # 每个副本理想的并发数
              min_replicas: 2
              max_replicas: 2
              upscale_delay_s: 10                   # 扩容延迟
              downscale_delay_s: 10                 # 缩容延迟
              metrics_interval_s: 2                 # 采样间隔
            ray_actor_options:
              num_gpus: 1                     # 每个副本使用的 CPU 核心数
  rayClusterConfig:
    rayVersion: '2.44.1'
    enableInTreeAutoscaling: true
    headGroupSpec:
      rayStartParams:
        dashboard-host: '0.0.0.0'
        num-cpus: '0' 
      template:
        spec:
          containers:
            - name: ray-head
              image: py846260131/kscale-text2img-app:mps-03
              ports:
                - containerPort: 6379
                  name: gcs-server
                - containerPort: 8265
                  name: dashboard
                - containerPort: 10001
                  name: client
                - containerPort: 8000
                  name: serve
          tolerations:
            - key: "node-role.kubernetes.io/control-plane"
              operator: "Exists"
              effect: "NoSchedule"
    workerGroupSpecs:
      - replicas: 1
        minReplicas: 1
        maxReplicas: 4
        groupName: worker-group
        rayStartParams: 
          num-gpus: '1'
        template:
          metadata:
            labels:
              app: text2img
          spec:
            containers:
              - name: ray-worker
                image: py846260131/kscale-text2img-app:mps-03
                lifecycle:
                  preStop:
                    exec:
                      command: ["/bin/sh", "-c", "ray stop"]
                resources:
                  limits:
                    cpu: 4
                    nvidia.com/gpu.shared: 1
                  requests:
                    cpu: '500m'
                    nvidia.com/gpu.shared: 1
                volumeMounts:
                  - name: models-volume
                    mountPath: /data
                    subPath: data
            volumes:
              - name: models-volume
                persistentVolumeClaim:
                  claimName: nfs-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: ray-service
  namespace: ypp
spec:
  type: NodePort
  selector:
    ray.io/node-type: head
  ports:
    - protocol: TCP
      port: 8265
      targetPort: 8265
      nodePort: 30021
      name: dashboard
    - protocol: TCP
      port: 8000
      targetPort: 8000
      nodePort: 30020
      name: serve